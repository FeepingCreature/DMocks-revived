What aspects are involved with ORM?
    - configuration
    - db setup
    - db access 
        - not db specific (that is, should work on postgre/mysql/mssql/sqlite)
        - basic insert/update/select
        - miscellaneous queries
    - caching

Configuration is tricky to get right. Ideally you could use attributes. We don't have them. The next best is mixins:

mixin(dbproperty!(int, "_varname", access = "field", notnull = true));

That doesn't work without named template parameters.

private int _varname;
private double _propname;
public void propname (double val) { _propname = val; }
mixin(dbfield!(int, "_varname", "notnull: true; column: frodo"));
mixin(dbproperty!(double, "propname", "notnull: false; column: baggins"));

That's better than XML dumped randomly somewhere, and it works. Basically, I can parse that and turn it into:

private int _varname;
private double _propname;
public void propname (double val) { _propname = val; }
static this () {
    hibernate.configure!(typeof(this), int)
        ("frodo", delegate (int value) { _varname = value; })
        .notnull();
}
static this () {
    hibernate.configure!(typeof(this), int)
        ("baggins", &propname)
        .null();
}

Might be able to do alias parameters, too...

Start with the static this method, then go with the CSS-style mixin configuration.
I could do an associative array, except that doesn't really work with heterogenous types.

Should support HQL. That way, I don't have to come up with my own query language -- better for end users and less work for me.

For db-specific stuff, insert/update/delete should be relatively boring and portable. Queries with joins are going to be tricky, and I won't implement them very efficiently.


I have some number of raw db field types: datetime, integer and floating point types, strings of various sorts.

I have some information about a type. I want to fetch an object of that type. What do I do?
    Assume no lazy loading.
    I have to assemble a SQL string.
    The simplest case is something that only contains primitives. That, I can do in a single select statement. The DbClass class just needs a list of DbPrimitive fields.
    The next simplest case is a class with a ComponentProperty. How do I register a type with a component property? I need to look at the registered info about the component type and simply splorch that into the current type's info. Assuming I have stuff in the right order. Instead, I need to treat them separately by descending into them.
    The hardest case is a class that references other classes. Then I have to do a join or go to the database multiple times.

    So, for now just work on the primitives case.

User defines a primary key field.


How do I configured db?
Maintain a default mapping between basic types and sql types. Users can override this, naturally.



At some point, due to lazy collections, I'll have to do some sort of proxying. This isn't a wonderful thing, since proxying is currently buggy. I can sidestep this issue by using constructors and requiring a default constructor for every class that is mapped. That isn't a wonderful solution, but it will work.
