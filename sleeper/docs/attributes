Configuring classes and structs for Sleeper is best accomplished through the attribute mixins. These use a CSS-like syntax. Some examples:

class Foo {
    mixin(dbclass!("table: FooTable;"));
    mixin(dbfield!(int, "_fraggle", "notnull: true; column: fraggle; pk;"));
    private int _fraggle;

    mixin(dbfield!(string, "_desc", "notnull: false; column: description; length: 200;"));
    private string _desc;
}

This system does not require you to create setters for the fields that you map, and it doesn't create visible setters, so you can do something like the following without data corruption:

class Foo {
    mixin(dbfield!(string, "_desc", "notnull: false; column: description; length: 200;"));
    private string _desc;

    public void description (string value) {
        _desc = value ~ "Hi there!";
    }

    public string description () {
        return _desc[5..$];
    }
}


Currently supported field attributes:
    notnull
        values: true, false
        If true, don't save nulls to the database and throw an exception when
        retrieving a null from the database.
    column
        values: any valid SQL identifier
        The value given will be the column name.
    pk
        values: none
        If present, this field is the primary key for the class. If more than
        one field is specified as primary key, an exception will be thrown. If
        no field is specified as primary key, problems may occur.
