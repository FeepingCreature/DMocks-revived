Done:
    - Expect(obj.method).Do(delegate) -- execute this delegate in place of obj.method.
    - Exceptions (throw!)
    - Aliases to support java coding style
    - Constructor-agnostic mocks
    - Expect(obj.method).PassThrough() -- delegate to the original method.

Soon:
    - DOCUMENTATION
    - Ordered expectations.
    - Partial mocks. If there's no expectation, fall back on the base class.
    - Something to deal with associative arrays more elegantly. Probably the PassThrough stuff.
    - An easier way of setting up recurring methods.

Maybe:
    - Mock free functions?
        Have to do some sort of manual name mangling, probably. Need a runtime function built to do these mocks. But it's done through multiple successive calls....
        template MockFunc (alias func) {
            ReturnType!(func) mockOfFunc(ParameterTypeTuple!(func)) {}
            void MockFunc () { redirect(&func, &mockOfFunc); }
        }
    - Thread safety
    - Throw an exception if there's no return value, delegate, or exception set up during replay. Ideally, have that happen earlier.
    - Don't mock opEquals, toHash if they're the same as the ones in Object. Maybe not anything that's the same as in Object.

When I figure out something clever:
    - Mock templated methods
    - Expect(obj.voidmethod);


What do I need for a 1.0 release?
    - Everything in 'soon'.
